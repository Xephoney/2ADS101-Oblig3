Oppgave 1
a) (programmering)
    Skriv en funksjon som regner ut gjennomsnittlig sorteringstid når man generer
    og sorterer n tilfeldige heltall for n = 10, 100, 1000, 10000. Funksjonen skal gjøre
    mange sorteringer for hver verdi av n. Bruk først innstikksortering og deretter
    Flettesortering. Skriv ut resultatene.


Oppgave 2
    (teori) Gitt en array med tallene 17, 14, 5, 7, 12, 1, 16, 29, 13, 4, 8, 18, 22, 2.
    () Anta nå at tallene skal sortertes med mergesort. Sett opp en tabell som
    viser hvordan hele sorteringen foregår, helt til du har en ferdig sortert
    array. Forklar med tekst i tillegg.

Oppgave 3
Følgende C++ kode er gitt:
using namespace std;
    struct Test {
    int key;
    std::string s;
    bool operator == (const Test& t2) const { return key == t2.key; }
};
namespace std {
template<>
    class hash<Test> {
    public:
        size_t operator() (const Test& t) const {
            return t.key % 7;
        }
        bool operator() (const Test& t1, const Test& t2) {
            return t1.key == t2.key;
        }
    };
}
int main(int argc, char *argv[])
{
    hash<Test> hashtabell;
    unordered_set<Test> uordnet_sett;
}
    (programmering) Skriv kode for å sette inn poster med nøkler 12, 13, 20,
    21, 1, 2, 3, 4, 5, 6 i uordnet_sett i opplistet rekkefølge.

Oppgave 4
I denne oppgaven skal du bruke kode som er gitt til slutt i
oppgaven, uten endringer.
a) Implementer funksjonene Node::settinn_kant(), Graf::settinn_node() og
    Graf::nn_node(). I sistnevnte funksjon skal du benytte den interne strukturen til å søke etter en node med gitt navn. Funksjonen skal returnere en
    peker til noden dersom den ns, og nullptr ellers.
b)  1. Implementer funksjonen Graf::settinn_kant()
    2. Lag en testgraf i main() med noder {A, B, C, D og E} og kanter {AB(1.0), AC(2.0), BC(2.0), CD(3.0), DE(1.0), AE(5.0),
    CE(4.0}
